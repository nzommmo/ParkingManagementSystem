-- MySQL Script generated by MySQL Workbench
-- Sat Jan 25 21:33:55 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema PackingManagementSystem
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema PackingManagementSystem
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `PackingManagementSystem` DEFAULT CHARACTER SET utf8mb4 ;
USE `PackingManagementSystem` ;

-- -----------------------------------------------------
-- Table `PackingManagementSystem`.`Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PackingManagementSystem`.`Users` (
  `UserId` INT(11) NOT NULL AUTO_INCREMENT,
  `FirstName` VARCHAR(255) NOT NULL,
  `LastName` VARCHAR(255) NOT NULL,
  `Email` VARCHAR(255) NOT NULL,
  `Password` VARCHAR(255) NOT NULL,
  `Role` ENUM('Admin', 'Parking-lot Attendant', 'User') NULL DEFAULT 'User',
  `created_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  PRIMARY KEY (`UserId`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `PackingManagementSystem`.`Loyalty_Points`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PackingManagementSystem`.`Loyalty_Points` (
  `LoyaltyId` INT(11) NOT NULL AUTO_INCREMENT,
  `UserId` INT(11) NOT NULL,
  `Points` DECIMAL(10,2) NULL DEFAULT 0.00,
  `Total_Points_Earned` DECIMAL(10,2) NULL DEFAULT 0.00,
  `Last_Earned_Date` DATETIME NULL DEFAULT NULL,
  `created_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  PRIMARY KEY (`LoyaltyId`),
  INDEX `UserId` (`UserId` ASC) VISIBLE,
  CONSTRAINT `Loyalty_Points_ibfk_1`
    FOREIGN KEY (`UserId`)
    REFERENCES `PackingManagementSystem`.`Users` (`UserId`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `PackingManagementSystem`.`Pricing_Rates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PackingManagementSystem`.`Pricing_Rates` (
  `Rate_id` INT(11) NOT NULL AUTO_INCREMENT,
  `Rate` DECIMAL(10,2) NOT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`Rate_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `PackingManagementSystem`.`Tickets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PackingManagementSystem`.`Tickets` (
  `TicketId` INT(11) NOT NULL AUTO_INCREMENT,
  `Assigned_TO` VARCHAR(255) NOT NULL,
  `UserId` INT(11) NULL DEFAULT NULL,
  `Guest_Email` VARCHAR(255) NULL DEFAULT NULL,
  `Guest_Phone` VARCHAR(15) NULL DEFAULT NULL,
  `Stay_Duration` TIME GENERATED ALWAYS AS (timediff(`End_Time`,`Start_Time`)) STORED,
  `Start_Time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  `End_Time` DATETIME NULL DEFAULT NULL,
  `Rate_id` INT(11) NOT NULL,
  `Status` ENUM('Paid', 'Payment_In_Progress', 'Unpaid') NULL DEFAULT 'Unpaid',
  `created_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`TicketId`),
  UNIQUE INDEX `Assigned_TO` (`Assigned_TO` ASC) VISIBLE,
  INDEX `UserId` (`UserId` ASC) VISIBLE,
  INDEX `Rate_id` (`Rate_id` ASC) VISIBLE,
  CONSTRAINT `Tickets_ibfk_1`
    FOREIGN KEY (`UserId`)
    REFERENCES `PackingManagementSystem`.`Users` (`UserId`),
  CONSTRAINT `Tickets_ibfk_2`
    FOREIGN KEY (`Rate_id`)
    REFERENCES `PackingManagementSystem`.`Pricing_Rates` (`Rate_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `PackingManagementSystem`.`Payments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PackingManagementSystem`.`Payments` (
  `PaymentId` INT(11) NOT NULL AUTO_INCREMENT,
  `TicketId` INT(11) NOT NULL,
  `Amount` DECIMAL(10,2) NULL DEFAULT 0.00,
  `Payment_Method` ENUM('Mpesa', 'Cash', 'Bank') NULL DEFAULT 'Cash',
  `Payment_Status` ENUM('Pending', 'Completed') NULL DEFAULT 'Pending',
  `Payment_Date` DATETIME NULL DEFAULT NULL,
  `Payment_Time` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`PaymentId`),
  UNIQUE INDEX `TicketId` (`TicketId` ASC) VISIBLE,
  CONSTRAINT `Payments_ibfk_1`
    FOREIGN KEY (`TicketId`)
    REFERENCES `PackingManagementSystem`.`Tickets` (`TicketId`))
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb4;

USE `PackingManagementSystem` ;

-- -----------------------------------------------------
-- Placeholder table for view `PackingManagementSystem`.`TicketDetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PackingManagementSystem`.`TicketDetails` (`TicketId` INT, `Assigned_TO` INT, `UserId` INT, `Guest_Email` INT, `Guest_Phone` INT, `Stay_Duration` INT, `Start_Time` INT, `End_Time` INT, `Rate_id` INT, `Status` INT, `created_at` INT, `Amount` INT);

-- -----------------------------------------------------
-- View `PackingManagementSystem`.`TicketDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PackingManagementSystem`.`TicketDetails`;
USE `PackingManagementSystem`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `PackingManagementSystem`.`TicketDetails` AS select `t`.`TicketId` AS `TicketId`,`t`.`Assigned_TO` AS `Assigned_TO`,`t`.`UserId` AS `UserId`,`t`.`Guest_Email` AS `Guest_Email`,`t`.`Guest_Phone` AS `Guest_Phone`,`t`.`Stay_Duration` AS `Stay_Duration`,`t`.`Start_Time` AS `Start_Time`,`t`.`End_Time` AS `End_Time`,`t`.`Rate_id` AS `Rate_id`,`t`.`Status` AS `Status`,`t`.`created_at` AS `created_at`,if(`t`.`End_Time` is null,0,timestampdiff(MINUTE,`t`.`Start_Time`,`t`.`End_Time`) / 60.0 * `pr`.`Rate`) AS `Amount` from (`PackingManagementSystem`.`Tickets` `t` join `PackingManagementSystem`.`Pricing_Rates` `pr` on(`t`.`Rate_id` = `pr`.`Rate_id`));
USE `PackingManagementSystem`;

DELIMITER $$
USE `PackingManagementSystem`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `PackingManagementSystem`.`AfterTicketInsert`
AFTER INSERT ON `PackingManagementSystem`.`Tickets`
FOR EACH ROW
BEGIN
    -- Insert a corresponding payment record with default status 'Pending' and amount 0
    INSERT INTO Payments (
        TicketId,
        Amount,
        Payment_Method,
        Payment_Status,
        Payment_Date,
        Payment_Time
    )
    VALUES (
        NEW.TicketId, -- Ticket ID from the newly created ticket
        0, -- Set initial amount to 0
        'Cash', -- Default payment method is 'Cash'
        'Pending', -- Default payment status is 'Pending'
        NULL, -- Payment date will be set later
        NULL -- Payment time will be set later
    );
END$$

USE `PackingManagementSystem`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `PackingManagementSystem`.`SetEndTimeOnPaymentInProgress`
BEFORE UPDATE ON `PackingManagementSystem`.`Tickets`
FOR EACH ROW
BEGIN
    IF NEW.Status = 'Payment_In_Progress' AND OLD.Status != 'Payment_In_Progress' THEN
        SET NEW.End_Time = NOW();
    END IF;
END$$

USE `PackingManagementSystem`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `PackingManagementSystem`.`Add_Loyalty_Points_After_Payment`
AFTER UPDATE ON `PackingManagementSystem`.`Payments`
FOR EACH ROW
BEGIN 
    DECLARE user_id INT;
    DECLARE payment_amount DECIMAL(10, 2);
    DECLARE loyalty_points DECIMAL(10, 2);
    
    -- Check if payment is completed
    IF NEW.Payment_Status = 'Completed' THEN
        -- Get the associated ticket and user information
        SELECT t.UserId, p.Amount INTO user_id, payment_amount
        FROM Payments p
        JOIN Tickets t ON p.TicketId = t.TicketId
        WHERE p.PaymentId = NEW.PaymentId;
        
        -- Only add loyalty points for registered users
        IF user_id IS NOT NULL THEN
            -- Calculate loyalty points (1% of payment amount)
            SET loyalty_points = ROUND(payment_amount * 0.01, 2);
            
            -- Insert or update loyalty points
            INSERT INTO Loyalty_Points (UserId, Points, Total_Points_Earned, Last_Earned_Date)
            VALUES (user_id, loyalty_points, loyalty_points, CURRENT_TIMESTAMP)
            ON DUPLICATE KEY UPDATE 
                Points = Points + loyalty_points,
                Total_Points_Earned = Total_Points_Earned + loyalty_points,
                Last_Earned_Date = CURRENT_TIMESTAMP;
        END IF;
    END IF;
END$$

USE `PackingManagementSystem`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `PackingManagementSystem`.`AfterPaymentUpdate`
AFTER UPDATE ON `PackingManagementSystem`.`Payments`
FOR EACH ROW
BEGIN
    IF @update_ticket_status = TRUE AND @ticket_to_update = NEW.TicketId THEN
        UPDATE Tickets SET Status = 'Paid' WHERE TicketId = NEW.TicketId;
        SET @update_ticket_status = NULL;
        SET @ticket_to_update = NULL;
    END IF;
END$$

USE `PackingManagementSystem`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `PackingManagementSystem`.`BeforePaymentUpdate`
BEFORE UPDATE ON `PackingManagementSystem`.`Payments`
FOR EACH ROW
BEGIN
    -- If payment status is being changed to Completed
    IF NEW.Payment_Status = 'Completed' AND OLD.Payment_Status != 'Completed' THEN
        -- Set payment date and time directly
        SET NEW.Payment_Date = CURRENT_DATE;
        SET NEW.Payment_Time = CURRENT_TIME;
        
        -- Signal that the ticket should be updated
        SET @ticket_to_update = NEW.TicketId;
        SET @update_ticket_status = TRUE;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
